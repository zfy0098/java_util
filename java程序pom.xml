<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 
 <groupId>com.rhjf</groupId>
  <artifactId>PlanTasks</artifactId>
  <packaging>jar</packaging>
  <version>1.0</version>
  
  
  <modelVersion>4.0.0</modelVersion>
  
  
  <name>plantasks</name>
  <url>http://maven.apache.org</url>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>
  
  
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    
    		
	<!-- mysql驱动包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.29</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/c3p0/c3p0 -->
	<dependency>
	    <groupId>c3p0</groupId>
	    <artifactId>c3p0</artifactId>
	    <version>0.9.1.2</version>
	</dependency>
		<dependency>
		    <groupId>log4j</groupId>
		    <artifactId>log4j</artifactId>
		    <version>1.2.17</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <version>4.5.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore -->
<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpcore</artifactId>
    <version>4.4.5</version>
</dependency>


<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpmime -->
<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpmime</artifactId>
    <version>4.5.2</version>
</dependency>
		    

	<!-- json jar包-->
	<dependency>
	    <groupId>net.sf.json-lib</groupId>
	    <artifactId>json-lib</artifactId>
	    <version>2.4</version>
	    <classifier>jdk15</classifier>
	</dependency>
		
	
	<!-- https://mvnrepository.com/artifact/javax.mail/mail -->
<dependency>
    <groupId>javax.mail</groupId>
    <artifactId>mail</artifactId>
    <version>1.4.7</version>
</dependency>
	
	<!-- https://mvnrepository.com/artifact/javax.activation/activation -->
<dependency>
    <groupId>javax.activation</groupId>
    <artifactId>activation</artifactId>
    <version>1.1.1</version>
</dependency>
	
	
  </dependencies>
  
    <build>
     	<sourceDirectory>src/main/java</sourceDirectory>
        <plugins>
        <plugin>
			<artifactId>maven-assembly-plugin</artifactId>
			<version>2.2</version>
			<configuration>
				<archive>
					<manifest>
						<mainClass>com.rhjf.pay.Amount</mainClass>
					</manifest>
				</archive>
				<descriptorRefs>
					<descriptorRef>
						jar-with-dependencies
					</descriptorRef>
				</descriptorRefs>
			</configuration>
		</plugin>
        </plugins>
		<!-- 
		
			Maven项目打包成可执行Jar文件

			在使用Maven完成项目以后，如果是需要打包成可执行的Jar文件，我们通过eclipse的导出很麻烦，还得指定入口文件的位置，还得说明依赖的jar包，既然都使用Maven了，很重要的一个目的就是让这些繁琐的操作简单。我们可以通过插件完成这项工作，使用assembly插件。具体使用方式如下：

			1、在项目中加入插件的依赖：

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.xxx.Main</mainClass>
						</manifest>
					</archive>
					<descriptorRefs>
						<descriptorRef>
							jar-with-dependencies
						</descriptorRef>
					</descriptorRefs>
				</configuration>
			</plugin>
			
			注意插件中要写明main方法文件入口位置。

			2、通过命令行到工作空间的项目路径下，比如：D:\workspace\test（工作空间是workspace，项目是test），然后执行以下命令：

			mvn assembly:assembly 

			注意：在执行这个命令之前，必须先配置Maven的环境变量，检查是否配置可通过命令： mvn -version

			3、如果上面的命令成功执行，那么在项目路径的target文件下就会有两个jar文件，一个是有jar包依赖的，一个是没jar包依赖的。

			4、执行jar包，通过命令： java -jar xxx.jar 执行。
		-->
	</build>
</project>
